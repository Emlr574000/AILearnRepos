# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dkbBl71PPOV4e3Q6a947CDu7f15Yl2vB
"""

import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
#Model Seçimi
from sklearn.ensemble import RandomForestClassifier#rastgele orman algoritması seçili.
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score


url='https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data'
columns=['yas','is_turu','gozlem_sayisi','egitim','egitim_seviyesi','evlilik_durum','meslek','iliski_durum','irk','cinsiyet','sermaye_kazanım','sermaye_kaybi','haftalik_calisma_saati','anavatani','gelir']
df=pd.read_csv(url,header=None,names=columns)#Default veriseti başlıkları bulunmamaktadır.başlıklar verilen columnlardan alınmaktadır.
df=df.replace(' ?',np.nan)#Soruişareti bolunan tüm bölümleri NaN ifadesi ile değiştirmektedir.
df=df.dropna()#NaN verisine değiştirilmiş tüm birimler verisetinden atılır.Bu sayede veriseti basitlik kazanır.
sns.countplot(x='gelir',hue='cinsiyet',data=df)
df['gelir']=df['gelir'].apply(lambda x:1 if x =='>50K' else 0) #Eğer erkekler 50 binden fazla kazanıyorsa >50K gir yoksa kadınlara yaz
dummies=pd.get_dummies(df,columns=['is_turu','egitim','evlilik_durum','meslek','iliski_durum','irk','cinsiyet','anavatani'])
#is turu egitim evlilik durumu ve diğer kolon başlıkları sayısal değere dönüştürülerek işleme dahil edilir.
y=df['gelir']
df=pd.concat([df,dummies],axis=1)#Sütunu seç ve dummies sonucu ile dataframe i birleştir.
df=df.drop(['is_turu','egitim','evlilik_durum','meslek','iliski_durum','irk','cinsiyet','anavatani'],axis=1)
#is turu egitim evlilik ve bunun gibi sütunları verikümesinden at.
X=df.drop('gelir',axis=1)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=6)
rf=RandomForestClassifier(random_state=42)#Algoritma tanımı yapıldı.
params={'n_estimators':[100,200,500],'max_depth':[10,20,30]}#n_estimators karar ağacı sayısını belirler.Max_depth karar ağaçlarının derinliğini belirler.
grid=GridSearchCV(rf,params,cv=5,scoring='accuracy')#belirtilen parametrelerin rastgele deneyerek en iyi sonucu bulur.
#Model eğitimi
grid.fit(X,y)
print("En iyi parametreler : ",grid.best_params_)
best_rf=grid.best_estimator_
print("Eğitim skoru : ", best_rf.score(X_train,y_train))
print("Test Skoru : ",best_rf.score(X_test,y_test))

